"""Functions for post-processing simulation outputs.

Note: These functions will most likely be moved to a separate module in the near future.

"""


def generate_default_schedule(weekday=None, weekend=None):
    """Create a list of 8760 values based on a daily schedule for weekend and weekday.

    Args:
        weekday: A list of 24 values for each hour of a weekday. The values can
            be 0 or 1.
        weekend: A list of 24 values for each hour of a weekend day. The values can
            be 0 or 1.

    Returns:
        List -- A list of 8760 values for the year.

    """
    weekend = weekend or [0] * 24
    weekday = weekday or \
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]
    assert len(weekend) == 24, 'Weekend list should be 24 values.'
    assert len(weekday) == 24, 'Weekend list should be 24 values.'
    weekend = [0 if v == 0 else 1 for v in weekend]
    weekday = [0 if v == 0 else 1 for v in weekday]
    all_values = []
    day_counter = 0
    week_counter = 1
    while day_counter < 365:
        day_counter += 1
        if week_counter < 7:
            if week_counter == 1:
                all_values.extend(weekend)
            else:
                all_values.extend(weekday)
            week_counter += 1
        else:
            all_values.extend(weekend)
            week_counter = 1
    return all_values


def get_occ_pattern(sun_up_hours, schedule=None):
    """Parse the sun-up hours from sun up hours .txt file.

    Args:
        sun_up_hours: A list of sun up hours as integers.
        schedule: A list of 8760 values for the occupancy schedule.

    Returns:
        List - A filtered version of the annual schedule that only includes the
            sun-up-hours.

    """
    schedule = schedule or generate_default_schedule()
    occ_pattern = [schedule[h] for h in sun_up_hours]

    return occ_pattern


def annual_metrics(
        ill_file, sun_up_hours, schedule=None, threshold=300, min_t=100, max_t=2000
        ):
    """Compute annual metrics for a given result file.

    Args:
        ill_file: Path to an ill file generated by Radiance. The ill file should be
            tab separated and shot NOT have a header. Each rows are the results for
            a sensor point and each column is the illuminance value for a sun_up_hour.
            The number of columns should match the number of columns.
        sun_up_hours: List of hours of the year for sun up hours that corresponds to
            columns inside the ill file.
        schedule: An annual schedule for 8760 hours of the year.
        threshold: Threshold illuminance level for daylight autonomy metric.
            Default: 300.
        min_t: Minimum threshold for useful daylight illuminance. Default: 100.
        max_t: Maximum threshold for useful daylight illuminance. Default: 2000.

    Returns:
        Tuple(List, List) -- Two lists of daylight autonomy and useful daylight
            illuminance for sensor points from the ill file. Number of sensors matches
            the number of lines in ill input file.

    """
    da = []
    udi = []
    occ_pattern = get_occ_pattern(sun_up_hours=sun_up_hours, schedule=schedule)
    total_occupied_hours = sum(occ_pattern)
    with open(ill_file) as results:
        for pt_res in results:
            pda = 0
            pudi = 0
            for is_occ, hourly_res in zip(occ_pattern, pt_res.split()):
                if is_occ == 0:
                    continue
                value = float(hourly_res)
                if value > threshold:
                    pda += 1
                if min_t <= value <= max_t:
                    pudi += 1
            da.append(round(100.0 * pda / total_occupied_hours, 2))
            udi.append(round(100.0 * pudi / total_occupied_hours, 2))
    return da, udi
